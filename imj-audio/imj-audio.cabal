name:                imj-audio
version:             0.1.0.3
Category:            Audio
Synopsis:            Bindings to a C++ lockfree audio engine.
Description:         Bindings to a C++ lockfree audio engine allowing to play music in real time.
homepage:            https://github.com/OlivierSohn/hamazed/blob/master/imj-audio//README.md
bug-reports:         https://github.com/OlivierSohn/hamazed/issues/
license:             BSD3
license-file:        LICENSE
author:              Olivier Sohn
maintainer:          olivier.sohn@gmail.com
copyright:           2017 - 2018 Olivier Sohn
build-type:          Simple
extra-source-files:  README.md CHANGELOG.md
cabal-version:       >=1.10

Tested-With: GHC == 8.2.2, GHC == 8.4.3

-------------- Flags -----------------------------------------------------------
--
-- [Default values]
--
--    The default flag values will give you the best runtime performances.
--
-- [Benchmarks]
--                                      "To lock, or not to lock."
--
--    Using 'imj-audio-exe',
--    with the 'LogTime' flag set to 'True', you can verify
--    that, under contention, the best value for the 'Lock' flag is 'False'.
--    (You'll need to uncomment tha call to 'stressTest'.)
--
--    The durations reported below were collected using 'imj-audio-exe',
--    on a 2-core CPU '2,2 GHz Intel Core i7', with an audio-buffer length of
--    8 milliseconds.
--    Contention was simulated by running a parallel compilation on the side
--    that continuously required 90% of cpu.
--
--   - when the 'Lock' flag is 'False',
--      there is no duration peak, the audio runs smoothly.
--      A typical log will look like:
--      > average : 15 microseconds, max 80 microseconds
--   - when the 'Lock' flag is 'True':
--      Due to the priority inversion effect, there are occasionally
--      long duration peaks like this one:
--      > average : 15 microseconds, max 10000 microseconds
--      which result in audio buffer underruns, hence (very loud) audio cracks.
--      An attempt was made to fix this by raising the priority of the thread
--      to realtime before taking the lock, but the priority inversion effect
--      was still here (I honnestly don't know why exactly).
--      A second, successfull attempt was then made to fix this, by removing the
--      need for a lock, using lockfree datastructures and algorithms.

Flag Lock
    Description: When false (recommended), the audio engine callback doesn't use any lock,
                 lock-free datastructures are used and audio runs smoothly, even under contention.
                 When true (not recommended, very unsafe), the audio-engine callback uses a lock to protect
                 access to non-lockfree datastructures. Under contention, priority inversion arise
                 when a non-realtime thread owns this lock, leading to unwanted audio-buffer underruns
                 generating (very loud) audio cracks.
    Manual: True
    Default: False

Flag LogTime
    Description: Enables logging of maximum and average duration of the audio callback, over 1000 runs.
                [Warning] Logging always happens in the audio realtime thread.
    Manual: True
    Default: False

Flag LogOverflows
    Description: Enables logging of audio callback overflows.
                [Warning] On overflow, logging happens in the audio realtime thread.
    Manual: True
    Default: False

Flag LogMidi
    Description: Enables logging of note on / note off midi events.
                Logging will always happen outside the audio realtime thread.
    Manual: True
    Default: False

Flag LogMem
    Description: Enables logging of memory allocations and deallocations.
                If the allocation or deallocation happens in the
                audio realtime thread, in addition to the log,
                a stack trace will be logged.
                [Warning] Logging may happen in the audio realtime thread.
    Manual: True
    Default: False

Flag Assertions
    Description: Enables assertions verifying program consistency. If an assertion
                 fails at runtime, a log will be written, with the assertion content,
                 source file name and line number. Then, a stack trace will be written,
                 and the program will crash.
    Manual: True
    Default: False

Flag SlowFFT
    Description: DO NOT USE unless for benchmarking purposes.
                 Forces to use the naive unoptimized FFT implementation, even
                 on platforms where faster alternatives are available.
    Manual: True
    Default: False

--------------------------------------------------------------------------------

-- This convenience library builds cxx sources.
-- When cxx-sources and cxx-options will be available in cabal,
-- we can merge this convenience library with the main library.
-- Today if we merge the two, we have compilation flags conflicts because
-- the main library builds c while converting an .hsc file to the corresponding
-- .hs file.
library imj-audio-cxx
  hs-source-dirs:      srcDummy
  exposed-modules:     Imj.Audio.Dummy
  c-sources:           c/library.cpp
                     , c/memory.cpp
                     , c/extras.cpp
                     , c/wrapper.cpp
  default-language:    Haskell2010

  extra-libraries:     stdc++

  if os(linux) || os(freebsd) || os(darwin)
    pkgconfig-depends: portaudio-2.0
  else
    extra-libraries:   portaudio

  if(flag(SlowFFT))
    cc-options:        -DIMJ_USE_SLOW_FFT
  else
    if os(darwin)
      extra-libraries:   vDSP
      -- This path is valid on OSX 10.13.3, it may require to be adjusted on other versions:
      extra-lib-dirs:    /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A

  cc-options:          -std=c++17 -D_USE_MATH_DEFINES -O2 -ffast-math
  if os(linux)
    cc-options:        -fpermissive
  if os(windows)
    cc-options:        -D_UNICODE -DUNICODE
    -- TODO we may need -municode at link-time on windows.
  if(!flag(Assertions))
    -- we need rtti only in debug mode
    cc-options:        -DNDEBUG -fno-rtti
  if(flag(Lock))
    cc-options:        -DIMJ_AUDIO_MASTERGLOBALLOCK
  if(flag(LogTime))
    cc-options:        -DIMJ_LOG_AUDIO_TIME
  if(flag(LogOverflows))
    cc-options:        -DIMJ_LOG_AUDIO_OVERFLOW
  if(flag(LogMidi))
    cc-options:        -DIMJ_LOG_MIDI
  if(flag(LogMem))
    cc-options:        -DIMJ_LOG_MEMORY

library
  hs-source-dirs:      src
  include-dirs:        c/cpp.audio/include
  exposed-modules:     Imj.Audio
                     , Imj.Audio.Envelope
                     , Imj.Audio.Harmonics
                     , Imj.Audio.Midi
                     , Imj.Audio.Output
                     , Imj.Audio.SpaceResponse
                     , Imj.Music.Alter
                     , Imj.Music.Compose
                     , Imj.Music.Compositions.Tchaikovski
                     , Imj.Music.Compositions.Tech
                     , Imj.Music.Compositions.Vivaldi
                     , Imj.Music.Instruction
                     , Imj.Music.Instrument
                     , Imj.Music.Midi
                     , Imj.Music.Play
                     , Imj.Music.Score
-- To build the haddock doc, first remove 'imj-audio-cxx' from build-depends
-- to circumvent https://github.com/haskell/cabal/issues/4215
  build-depends:       base >= 4.9 && < 4.12
                     , binary == 0.8.*
                     , containers ==0.5.*
                     , deepseq ==1.4.*
                     , event-list == 0.1.*
                     , imj-audio-cxx
                     , imj-prelude ==0.1.*
                     , imj-time ==0.1.*
                     , midi ==0.2.*
                     , non-negative == 0.1.*
                     , parsec ==3.1.*
                     , template-haskell >=2.12 && < 2.14
                     , text >=1.2.3 && < 1.3
                     , unliftio ==0.2.*
                     , unliftio-core ==0.1.*
                     , vector >= 0.12.0.1 && < 0.13
                     , vector-binary-instances ==0.2.*
  default-language:    Haskell2010

executable imj-audio-exe
  hs-source-dirs:      example
  main-is:             Main.hs
  build-depends:       base >= 4.9 && < 4.12
                     , imj-audio
  default-language:    Haskell2010

test-suite imj-audio-test
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  other-modules:       Test.Imj.ParseMusic
                     , Test.Imj.ReadMidi
  main-is:             Spec.hs
  build-depends:       base >= 4.9 && < 4.12
                     , imj-audio
                     , text >=1.2.3 && < 1.3
  default-language:    Haskell2010

source-repository head
  type:     git
  location: https://github.com/OlivierSohn/hamazed/
  subdir:   imj-audio
